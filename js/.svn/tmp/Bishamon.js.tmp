namespace.request("Bishamon");

Bishamon = (function () {
	var _map = null,
		_googleDocUrl = 'https://spreadsheets.google.com/feeds/list/0AuXnU2fvgMAFdC1Mc1phUU50dGloY1RWZjZXREdyalE/od6/public/values?alt=json-in-script&callback=?',
		_intro = true,
		_urlVars = {},
        _refreshActions = [],
		_mapStyles = {
            regular : [{
                stylers: [{
                    saturation: 0
                }, {
                    lightness: 0
                }, {
                    gamma: 0
                }]
            }],
            bw : [{
                stylers: [{
                    saturation: -99
                }, {
                    lightness: 36
                }, {
                    gamma: 1.21
                }]
                }],
            night: 	[{
                stylers: [{
                    invert_lightness: true
                }, {
                    saturation: -100
                }]
            }]
        },
        _city = "",
        _cityBounds = {
            "minamisoma" : {
                south : 37.5,
                west : 140.76,
                north: 37.76,
                east: 141
            }, "namie" : {
                south : 37.412,
                west : 140.688,
                north: 37.626,
                east: 141.051
            }, "naraha" : {
                south : 37.234,
                west : 140.866,
                north: 37.339,
                east: 141.039
            }
        }
        ;
                
	var _updateMapLink = function () {
		var maplink = 'http://gis.ats.ucla.edu/bishamon/?zl='
			+ _map.getZoom() + '&lat=' + _map.getCenter().lat()
			+ '&lng=' + _map.getCenter().lng() 
			// TODO: fill in catranges
			+ '&catranges=' + Bishamon.RadiationSlider.getRanges().join(",");
		$('#maplink').val(maplink);
	}
	
	var _parseGoogleDoc = function ($data) {

		var zoomLevel = _urlVars.zl != undefined ? _urlVars.zl 
                : parseInt($data.feed.entry[0].gsx$zoomlevel.$t),
			lat = _urlVars.lat != undefined ? _urlVars.lat 
                : parseFloat($data.feed.entry[0].gsx$lat.$t),
			lng = _urlVars.lon != undefined ? _urlVars.lon 
                : parseFloat($data.feed.entry[0].gsx$lng.$t),
			title = $data.feed.entry[0].gsx$title.$t,
			description = $data.feed.entry[0].gsx$description.$t,
			sw = null,
			ne = null,
			bounds = null,
			catRanges = typeof _urlVars.catranges != "undefined" ? 
				_urlVars.catranges.split(",") : [0.3,0.6,0.9,1.2]
			;

		$('#title').html(title);
		$('#description').html(description);
	
	
		var mapOptions = {
			zoom: zoomLevel,
			center: new google.maps.LatLng(lat,lng),
			mapTypeId: google.maps.MapTypeId.ROADMAP,
			mapTypeControl: false,
			streetViewControl: false,
			maxZoom: _urlVars.maxzoom ? _urlVars.maxzoom : 17,
			scaleControl: true
		};

		_map = new google.maps.Map(document.getElementById("map_canvas"),
            mapOptions
        );
		Bishamon.CitySearch.init(_map, bounds);

		//City override
        var possibleCity = window.location.pathname
            .split("/").pop();
        if (typeof _cityBounds[possibleCity] != 'undefined') {
        	_city = possibleCity;
            var cityBounds = _cityBounds[possibleCity];
            sw = new google.maps.LatLng(cityBounds.south,cityBounds.west);
            ne = new google.maps.LatLng(cityBounds.north,cityBounds.east);
            bounds = new google.maps.LatLngBounds(sw,ne);
		} else {
			sw = new google.maps.LatLng(36.701, 138.806);
			ne = new google.maps.LatLng(38.093, 141.368);
			bounds = new google.maps.LatLngBounds(sw,ne);
		}

		_map.setCenter(new google.maps.LatLng(lat,lng));
		_map.setZoom(zoomLevel);
	
		_map.fitBounds(bounds);

		//Draw the radiation data layer
		Bishamon.GridLayer.init(_map, {
<<<<<<< .mine
			city: _city,
=======
            city: _city,
>>>>>>> .r29
			clipToCity: ((_city == 'minamisoma')
				?  "CITY2 = '南相馬市'"
				: (_city == 'namie')
				?  "CITY2 = '浪江町'"
				: (_city == 'naraha')
				?  "CITY2 = '楢葉町'"
                : undefined
				),
			cityClipPoints: ((_city == 'minamisoma')
				?  'ST_INTERSECTS(Latitude,RECTANGLE('
                    + 'LATLNG(37.507,140.81),LATLNG(37.76,142)))'
				: undefined
				)
			}
		);
		Bishamon.RadiationSlider.init({
            maxRange: _urlVars.maxrange ? _urlVars.maxrange : 2,
            catRanges: catRanges
        });
	
		// This as an array of functions to call, which each component
		// can add to	
        _refreshActions.push(_updateMapLink);
		google.maps.event.addListener(_map, 'zoom_changed', function() {
	        $('#micro-instructions').show();
            for (var i in _refreshActions) {
                _refreshActions[i]();
            }
		});
	
		google.maps.event.addListener(_map, 'dragend', function(){
			_updateMapLink();
		});
        
		Bishamon.LayerSelector.init(_map, {
            city: _city
        });
        
		//Show opening box and resize windows
		if(_intro) {	 
			Bishamon.Intro.init(_city) ;
		}


	};
	
    var _toggleMapType = function ($e) {
		var target = $e.target.id,
			mapType = target.split('-')[1],
            style = _mapStyles.regular,
            mapTypeId = google.maps.MapTypeId.ROADMAP
            ;

		//toggle button classes
		$('#toggle-map-type').children().removeClass('active');
		$('#'+target).addClass('active');
		$('#maptype-display').html($('#'+target).html());

        switch (mapType) {
            case 'night':
                style = _mapStyles.night;
                break;
            case 'light':
                style = _mapStyles.bw;
                break;
            case 'regular':
                style = _mapStyles.regular;
                break;
            case 'satellite':
                mapTypeId = google.maps.MapTypeId.HYBRID;
                break;
            case 'terrain':
                mapTypeId = google.maps.MapTypeId.TERRAIN;
                break;
            default:
                alert("Invalid map type");
        }
        _map.setMapTypeId(mapTypeId);
        _map.setOptions({styles: style});
        $e.stopPropagation();
        return false;
    };

	
	return {
		init: function () {
			var hash;
			var hashes = window.location.href.slice(
                window.location.href.indexOf('?') + 1
            ).split('&');

			for (var i = 0; i < hashes.length; i++) {
				hash = hashes[i].split('=');
				_urlVars[hash[0]] = hash[1];
			}
            //Make it draggable
            $( ".draggable" ).draggable({containment: "parent"});
            
            //Toggle buttons
            $( "#toggledate" ).buttonset();
            //$( "#toggle-map-type" ).buttonset();
			$.getJSON(_googleDocUrl, _parseGoogleDoc);
            $("#toggle-map-type").click(_toggleMapType);
		},
        registerRefreshAction: function ($fn) {
            _refreshActions.push($fn);
        }
	}
})();
